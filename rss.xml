<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>LiteIDE</title>
    <link>https://visualfc.github.io</link>
    <pubDate>13 Aug 18 23:03 CST</pubDate>
    <item>
      <title>LiteIDE X34.1 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X34.1-Released/</link>
      <pubDate>2018-08-12 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X34.1 发布, 新版本更新了 gocode ，通过源码分析支持 Go1.11 modules 和 vendor 机制。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2018.08.12 Ver X34.1&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update gotools support go1.11 modules&lt;/li&gt;&#xA;&lt;li&gt;update gocode support go1.11 modules and vendor&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;enable open binary file for editor&lt;/li&gt;&#xA;&lt;li&gt;change widget readonly by binary file (ignore text file)&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;gocode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;change parser by source use gotools/types&lt;/li&gt;&#xA;&lt;li&gt;fix parser vendor &amp;amp; modules&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X34 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X34-Released/</link>
      <pubDate>2018-07-26 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X34 发布, 新版本支持 go1.11beta2 的 Go modules 机制。&#xA;更新了 gotools 和 gocode (github.com/visualfc/gocode) 以支持 Go modules 机制。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2018.07.26 Ver X34&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update gotools support go1.11 modules&lt;/li&gt;&#xA;&lt;li&gt;update gocode for &lt;a href=&#34;https://github.com/visualfc/gocode&#34;&gt;https://github.com/visualfc/gocode&lt;/a&gt; support go1.11 modules&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteApp&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;refactor folder model code, remove depends&lt;/li&gt;&#xA;&lt;li&gt;fix dock widget for Qt5.9.6 bug&lt;/li&gt;&#xA;&lt;li&gt;move view godoc from folderview to litebuild&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update BUILDARGS, remove -i for go1.11 build&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangCode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;change to github.com/visualfc/gocode for support go1.11 modules&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangDoc&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pdoc support real ImportPath display for Go modules or vendor&lt;/li&gt;&#xA;&lt;li&gt;fix docs.html $.GoogleCN code&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangEdit&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support go1.11 modules, view info / jump / find usages&lt;/li&gt;&#xA;&lt;li&gt;support parser import path for Go modules or vendor for godoc view&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangPackage&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add pkg/mod tree for Go modules&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;QuickOpen&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix view pos for editor manager&lt;/li&gt;&#xA;&lt;li&gt;support open file with fullpath on editor input&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;DlvDebugger&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix continue&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;gotools&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;types support go1.11 modules&lt;/li&gt;&#xA;&lt;li&gt;add pkgcheck support modules or vendor check&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;gocode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;clone &lt;a href=&#34;https://github.com/nsf/gocode&#34;&gt;https://github.com/nsf/gocode&lt;/a&gt; support go1.11 modules&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X33.4 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X33.4-Released/</link>
      <pubDate>2018-07-04 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X33.4 发布, 新版本代码完成使用 mdempsky/gocode 以支持 go1.11beta1 。&#xA;增强了 DlvDebugger 插件功能 ( variable, watch, threads, goroutines, registers)，以支持 Delve 调试时的更多信息显示。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2018.07.04 Ver X33.4&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update gocode for mdempsky/gocode support go1.11&lt;/li&gt;&#xA;&lt;li&gt;update DlvDebugger plugin for Delve detail information&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteDebug&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add threads/goroutines/registers view&lt;/li&gt;&#xA;&lt;li&gt;watch view support double clicked change and update&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;DlvDebugger&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add dlv rcp-mode for get more info&lt;/li&gt;&#xA;&lt;li&gt;variable and watch support detail information&lt;/li&gt;&#xA;&lt;li&gt;watch support local/package variable&lt;/li&gt;&#xA;&lt;li&gt;support threads/gorountines/registers model&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangCode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support &lt;a href=&#34;https://github.com/mdempsky/gocode&#34;&gt;https://github.com/mdempsky/gocode&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;QuickOpen&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add dly filter editor for optimize many files search&lt;/li&gt;&#xA;&lt;li&gt;fix quick open symbol action&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X33.3 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X33.3-Released/</link>
      <pubDate>2018-04-23 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X33.3 发布, 新版本支持导入行的包文件列表跳转，代码完成支持 GOPATH / vendor 包列表提示。重构了调试行为，Go 代码 Debug/DebugTest 移入编译菜单中，编译调试版本时可根据当前 Go 版本自动选择适应的 gcflags 编译设置，以更好的支持 Go1.10。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2018.04.23 Ver X33.3&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support import jump to package source file&lt;/li&gt;&#xA;&lt;li&gt;support import hints for all package on code completer&lt;/li&gt;&#xA;&lt;li&gt;add build &amp;amp; debug action to build menu&lt;/li&gt;&#xA;&lt;li&gt;fix build debug gcflags for go version&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteApp&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix tab style sheet for Qt5.9 on macOS&lt;/li&gt;&#xA;&lt;li&gt;project wizard add gocmdex/gopkgex for anywhere&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;build config file add debug support&lt;/li&gt;&#xA;&lt;li&gt;golang build add debug/debugtest action&lt;/li&gt;&#xA;&lt;li&gt;fix golang build debug gcflags depends for go version&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteDebug&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;filesystem add debug file action&lt;/li&gt;&#xA;&lt;li&gt;remove internal golang build function&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reimplemented backspace quotes audo insert/remove action&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangCode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;parser import package for GOPATH&lt;/li&gt;&#xA;&lt;li&gt;fix vendor import for code completer&lt;/li&gt;&#xA;&lt;li&gt;add import hints for all package option (default)&lt;/li&gt;&#xA;&lt;li&gt;add parser cgo completer list on editor&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangEdit&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix import line navigate show link source&lt;/li&gt;&#xA;&lt;li&gt;add import line jump to package file list&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;QuickOpen&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add quickopenfolder implement&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;gotools&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add new debugflag action for print debug gcflags for go version&lt;/li&gt;&#xA;&lt;li&gt;types find import dir check vendor&lt;/li&gt;&#xA;&lt;li&gt;types add import info and doc&lt;/li&gt;&#xA;&lt;li&gt;fix astview pkg nil check&#xA;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X33.2 Instructions and thanks</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X33.2-Instructions-and-thanks/</link>
      <pubDate>2018-03-06 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;LiteIDE X33.2 在 2.14 日正式发布。但直到昨天所有版本 macOS / Linux / Windows 才上传完毕，在此记录说明，并对大家一直以来的关心和帮助表示感谢。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt; LiteIDE 的日常开发一直是使用老大赠送的 macbook air 进行，而各个平台上的编译测试和发布则在台式机上完成。由于年前离职的原因没有了原来的台式电脑，现在 LiteIDE 的发布编译工作也放在 macbook air 上进行了。因此最初的时候 LiteIDE x33.2 只有 macOS 版本发布。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; 年后通过在 macOS 上使用 VirtualBox 安装了 Ubuntu 16.04 的 64位和 32位版本，编译了 LiteIDE X33 的 linux 版本并上传。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; 由于受 macbook 空间和资源所限，无法在 VBOX 虚拟机中安装和运行 win7 64 系统, 所以只能安装了 Window XP 和 Qt4, 编译了 LiteIDE Qt4 for Windows 版本上传，未能完成 Qt5 版本编译。一直到昨天，在网友的启发下，测试了官方的 Qt5.6.2 可以在 Windows XP 上安装，终于完成 LiteIDE Qt5 for Windows 版本的编译上传。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt; LiteIDE 从 2011 年开始开发公布，到目前已经开发了八年时间，发布过 70 多个版本，版本号目前达到 X33，期间很多人都给予了帮助，感谢所有曾经帮助过我的人。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Last&lt;/strong&gt; 最后附上 LiteIDE 的捐赠列表，感谢所有我认识和不认识的人。&#xA;&lt;a href=&#34;http://visualfc.github.io/support/&#34;&gt;http://visualfc.github.io/support/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2018.02.14 Ver X33.2&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add folder tool window split mode swith&lt;/li&gt;&#xA;&lt;li&gt;add archlinux makepkg&lt;/li&gt;&#xA;&lt;li&gt;add tcl syntax and build&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support function color, thanks &lt;a href=&#34;https://github.com/discoverfly&#34;&gt;discoverfly&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;add default-func color theme&lt;/li&gt;&#xA;&lt;li&gt;add style for scroll bars in sublime.qss, thanks &lt;a href=&#34;https://github.com/hauke96&#34;&gt;hauke96&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;add marks for selections and findings, thanks &lt;a href=&#34;https://github.com/jinq0123&#34;&gt;jinq0123&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteFind&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix editor regexp replace&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add context menu go tool action&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X33.2 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X33.2-Released/</link>
      <pubDate>2018-02-14 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X33.2 发布, 仅以此版本献给我曾经的岁月。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;三十功名尘与土，八千里路云和月。&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2018.02.14 Ver X33.2&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add folder tool window split mode swith&lt;/li&gt;&#xA;&lt;li&gt;add archlinux makepkg&lt;/li&gt;&#xA;&lt;li&gt;add tcl syntax and build&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support function color, thanks &lt;a href=&#34;https://github.com/discoverfly&#34;&gt;discoverfly&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;add default-func color theme&lt;/li&gt;&#xA;&lt;li&gt;add style for scroll bars in sublime.qss, thanks &lt;a href=&#34;https://github.com/hauke96&#34;&gt;hauke96&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;add marks for selections and findings, thanks &lt;a href=&#34;https://github.com/jinq0123&#34;&gt;jinq0123&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteFind&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix editor regexp replace&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add context menu go tool action&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>解决升级 xcode 后 Qt5.6.3 不能编译的问题</title>
      <link>https://visualfc.github.io/blog/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7-xcode-%E5%90%8E-Qt5.6.3-%E4%B8%8D%E8%83%BD%E7%BC%96%E8%AF%91%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>2017-12-15 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## 解决升级 xcode 后 Qt5.6.3 不能编译的问题 --&gt;&#xA;&#xA;&lt;p&gt;升级 xcode 后，Qt5.6.3 不能编译，提示类似下列错误&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;clang: warning: no such sysroot directory: &#39;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk&#39; [-Wmissing-sysroot]&#xA;&#xA;In file included from /Users/user/Qt5.6.3/5.6.3/clang_64/lib/QtCore.framework/Headers/QObject:1:&#xA;In file included from /Users/user/Qt5.6.3/5.6.3/clang_64/lib/QtCore.framework/Headers/qobject.h:40:&#xA;In file included from /Users/user/Qt5.6.3/5.6.3/clang_64/lib/QtCore.framework/Headers/qobjectdefs.h:41:&#xA;In file included from /Users/user/Qt5.6.3/5.6.3/clang_64/lib/QtCore.framework/Headers/qnamespace.h:37:&#xA;In file included from /Users/user/Qt5.6.3/5.6.3/clang_64/lib/QtCore.framework/Headers/qglobal.h:75:&#xA;/Users/user/Qt5.6.3/5.6.3/clang_64/lib/QtCore.framework/Headers/qsystemdetection.h:197:12: fatal error: &#39;TargetConditionals.h&#39; file not found&#xA;#  include &amp;lt;TargetConditionals.h&amp;gt;&#xA;           ^~~~~~~~~~~~~~~~~~~~~~&#xA;1 error generated.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;解决方法&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$cd /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs&#xA;$sudo ln -s MacOSX.sdk MacOSX10.12.sdk&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X33.1 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X33.1-Released/</link>
      <pubDate>2017-12-12 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X33.1 正式发布。&#xA;新版本对菜单进行调整和规范，新增了工具菜单，编辑菜单保持可见，重命名了部分工具窗口。&#xA;修复了编辑器内查找功能的全文替换错误，&#xA;对快速打开文件操作 ( ctrl+p / command+p ) 改用线程方式重新实现，新增了快速打开命令功能 ( ctrl+shift+p / command+shift+p )，集成了 &lt;a href=&#34;https://github.com/fatih/gomodifytags&#34;&gt;gomodifytags&lt;/a&gt; 并提供GUI界面实现对结构体 Tags 的快速增删功能。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;LiteIDE X33.1 使用 go1.10beta1 编译, 支持 Go1.9 / Go1.10beta1 或者更低的 Go 版本。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2017.12.12 Ver X33.1&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support quick open command&lt;/li&gt;&#xA;&lt;li&gt;support gomodifytags&lt;/li&gt;&#xA;&lt;li&gt;fix libpng warning on qt5 build&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteApp&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add tools menu for quick open actions&lt;/li&gt;&#xA;&lt;li&gt;standard and rename tool window title&lt;/li&gt;&#xA;&lt;li&gt;enable edit menu anytime, fix edit menu disable on editor lost focus.&lt;/li&gt;&#xA;&lt;li&gt;fix editor load large file bad_alloc recover&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEnv&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add select env to tools menu&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;check and not open large file&lt;/li&gt;&#xA;&lt;li&gt;fix edit hide edit sub menu &amp;lsquo;setup&amp;rsquo; on macos&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteFind&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix find editor replace all wrap around* GolangEdit&lt;/li&gt;&#xA;&lt;li&gt;Integrated &lt;a href=&#34;https://github.com/fatih/gomodifytags&#34;&gt;gomodifytags&lt;/a&gt; and gui tools support gomodifytags all options&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;QuickOpen&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add quick open command action (ctrl+shift+p/command+shift+p)&lt;/li&gt;&#xA;&lt;li&gt;quickopenfiles use thread for fast and cancel&lt;/li&gt;&#xA;&lt;li&gt;fix quickopenfile cancel loading for esc or liteapp quit&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>支持 Quick Open Command</title>
      <link>https://visualfc.github.io/blog/%E6%94%AF%E6%8C%81-Quick-Open-Command/</link>
      <pubDate>2017-12-04 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## 实现 Quick Open Command --&gt;&#xA;&#xA;&lt;p&gt;Sublime 和 VSCode 都有命令面板功能，方便快速调用命令。&#xA;LiteIDE 在 2016年7月发布的 X30 版本开始实现了 QuickOpen 插件，&#xA;目前支持 文件/编辑器/符号/行号 的快速跳转，但未实现菜单命令的快速跳转功能。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在最新的开发版本中，LiteIDE 加入了菜单命令的快速跳转功能 - Quick Open Command，&#xA;快捷键为 Ctrl+Shift+P / Command+Shift+P (macos)。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如下图显示，显示当前文件可用的菜单命令。&#xA;&lt;img src=&#34;/assets/media/2017-12-04-quickopen-command/quickopencommand.png&#34; alt=&#34;&#34; width=&#34;600&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;菜单与命令之间没有使用:分隔，而是用.来分隔，这样方便输入筛选。&#xA;&lt;img src=&#34;/assets/media/2017-12-04-quickopen-command/quickopencommand-filter.png&#34; alt=&#34;&#34; width=&#34;600&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;回车将直接执行选中的命令。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;实现 Quick Open Command 功能&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 的 QuickOpen 接口 API 位于 &lt;a href=&#34;https://github.com/visualfc/liteide/blob/master/liteidex/src/api/quickopenapi/quickopenapi.h&#34;&gt;liteidex/src/api/quickopenapi/quickopenapi.h&lt;/a&gt; 文件中。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;接口如下&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class IQuickOpen : public QObject&#xA;{&#xA;    Q_OBJECT&#xA;public:&#xA;    IQuickOpen(QObject *parent = 0) : QObject(parent) {}&#xA;    virtual QString id() const = 0;&#xA;    virtual QString info() const = 0;&#xA;    virtual void activate() = 0;&#xA;    virtual QAbstractItemModel *model() const = 0;&#xA;    virtual void updateModel() = 0;&#xA;    virtual QModelIndex filterChanged(const QString &amp;amp;text) = 0;&#xA;    virtual void indexChanged(const QModelIndex &amp;amp;index) = 0;&#xA;    virtual bool selected(const QString &amp;amp;text, const QModelIndex &amp;amp;index) = 0;&#xA;    virtual void cancel() = 0;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;其中 updateModel 函数负责更新数据，实现流程一下:&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;获取当前所有菜单 ID 列表&lt;/h4&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;LiteApi::IActionManager *manager = m_liteApp-&amp;gt;actionManager();&#xA;QStringList menuIdList = manager-&amp;gt;menuList();&#xA;(&amp;quot;menu/build&amp;quot;, &amp;quot;menu/debug&amp;quot;, &amp;quot;menu/edit&amp;quot;, &amp;quot;menu/file&amp;quot;, &amp;quot;menu/find&amp;quot;, &amp;quot;menu/help&amp;quot;, &amp;quot;menu/recent&amp;quot;, &amp;quot;menu/view&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;获取菜单的 Aciton 列表&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;根据 id 取得 QMenu&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;QMenu *menu = manager-&amp;gt;loadMenu(idMenu);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注意，因为 Edit / Build 菜单都是动态加载的，直接使用 menu-&amp;gt;action()是无法获得完整列表的。&#xA;可以通过以下代码获取。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;QAction *menuAct = menu-&amp;gt;menuAction();&#xA;QMenu *realMenu = menuAct-&amp;gt;menu();&#xA;QList&amp;lt;QAction*&amp;gt; actionList = realMenu-&amp;gt;actions();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;获取 Action 的 id, text, shortcut&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;在写 QuickOpenCommand 之前，大部分 QAction 是无法获取 id 的，但因为 LiteIDE 中的 Action 通过&lt;/p&gt;&#xA;&#xA;&lt;p&gt;IActionManager 注册以支持 自定义快捷键功能，所以在通过 IActionContext::regAction 函数注册 Aciton 时的 id/shortcut 时加入 act-&amp;gt;setData(id) 将 Aciton 注册用 id 保存下来，这样就可以通过 act-&amp;gt;data() 可以获取到 id, act-&amp;gt;text() 获取翻译后的文本，act-&amp;gt;shortcut() 获取 快捷键。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;将获取的 id,text,shortcut 加入列表中即可。&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;注册&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;通过 IQuickOpenManager::addFilter(const QString &amp;amp;sym, IQuickOpen *filter) 函数可以注册 QuickOpen，QuickOpenCommand 的 sym 选用的是 &amp;gt; ,在 view 菜单中加入相应 Action，快捷键是 Ctrl+Shift+P / Command+Shift+P 。&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;实现代码&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;实现代码位于 &lt;a href=&#34;https://github.com/visualfc/liteide/tree/master/liteidex/src/plugins/quickopen&#34;&gt;liteidex/src/plugins/quickopen&lt;/a&gt;&#xA;目录下 quickopenation.h 和 quickopenaction.cpp 文件中。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>支持 gomodifytags</title>
      <link>https://visualfc.github.io/blog/%E6%94%AF%E6%8C%81-gomodifytags/</link>
      <pubDate>2017-12-02 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## 实现 gomodifytags --&gt;&#xA;&#xA;&lt;p&gt;在 LiteIDE 最新的开发版本中，加入了对 &lt;a href=&#34;https://github.com/fatih/gomodifytags&#34;&gt;gomodifytags&lt;/a&gt; 的支持，&#xA;gomodifytags 的主要功能是对 Go语言结构体字段 (go struct field) 的 tags 进行增删和修改，比如 json, xml 以及其他自定义 tag 。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;结构体的选择&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当光标于结构内部时，Add Tags 和 Remove Tags 功能对应于当前光标下的整个结构体进行操作。&lt;/li&gt;&#xA;&lt;li&gt;当光标对结构体中字段进行选择时，Add Tags 和 Remove Tags 功能对于于光标所选中的行范围内字段进行操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;在 LiteIDE 中的 Add Tags Dialog / Remove Tags Dialog 中会有相应的提示。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;为结构体字段增加和修改 Tags&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;以下面结构体为例&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Server struct {&#xA;    Name        string&#xA;    Port        int&#xA;    EnableLogs  bool&#xA;    BaseDomain  string&#xA;    Credentials struct {&#xA;        Username string&#xA;        Password string&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;在 LiteIDE 中将光标置于 Name 到 } 结尾之间任意一处， 编辑菜单或右键调用 Add Tags 将对 Server 结构体全部字段进行操作。&#xA;如下图所示，选中 json 和 xml :&#xA;&lt;img src=&#34;/assets/media/2017-12-02-gomodifytags/goaddtags1.png&#34; alt=&#34;&#34; width=&#34;600&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;确认将获得下面结果&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Server struct {&#xA;    Name        string `json:&amp;quot;name&amp;quot; xml:&amp;quot;name&amp;quot;`&#xA;    Port        int    `json:&amp;quot;port&amp;quot; xml:&amp;quot;port&amp;quot;`&#xA;    EnableLogs  bool   `json:&amp;quot;enable_logs&amp;quot; xml:&amp;quot;enable_logs&amp;quot;`&#xA;    BaseDomain  string `json:&amp;quot;base_domain&amp;quot; xml:&amp;quot;base_domain&amp;quot;`&#xA;    Credentials struct {&#xA;        Username string `json:&amp;quot;username&amp;quot; xml:&amp;quot;username&amp;quot;`&#xA;        Password string `json:&amp;quot;password&amp;quot; xml:&amp;quot;password&amp;quot;`&#xA;    } `json:&amp;quot;credentials&amp;quot; xml:&amp;quot;credentials&amp;quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;json 和 xml 都可以自定义选项，多个选项以 , 作为分隔。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;删除结构体字段的 Tags&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;如果要删除上例中的 xml tags，同样将光标位于 Name 到 } 之间任意一处，编辑菜单或右键调用 Remove Tags 命令进行操作。&#xA;如下图所示，选中 json&#xA;&lt;img src=&#34;/assets/media/2017-12-02-gomodifytags/goremovetags1.png&#34; alt=&#34;&#34; width=&#34;600&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;确认将删除 xml tags， 所下图所示。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Server struct {&#xA;    Name        string `json:&amp;quot;name&amp;quot;`&#xA;    Port        int    `json:&amp;quot;port&amp;quot;`&#xA;    EnableLogs  bool   `json:&amp;quot;enable_logs&amp;quot;`&#xA;    BaseDomain  string `json:&amp;quot;base_domain&amp;quot;`&#xA;    Credentials struct {&#xA;        Username string `json:&amp;quot;username&amp;quot;`&#xA;        Password string `json:&amp;quot;password&amp;quot;`&#xA;    } `json:&amp;quot;credentials&amp;quot;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;删除也可以删除 tags 对应的选项，根据需要操作即可。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>fix liteide libpng warning</title>
      <link>https://visualfc.github.io/blog/fix-liteide-libpng-warning/</link>
      <pubDate>2017-11-23 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## fix liteide libpng warning --&gt;&#xA;&#xA;&lt;h3&gt;liteide issues #867&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Start LiteIDE build for Qt5 version suggests libpng warning. &lt;a href=&#34;https://github.com/visualfc/liteide/issues/867&#34;&gt;liteide issues #867&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;libpng warning: iCCP: profile &#39;ICC profile&#39;: &#39;GRAY&#39;: Gray color space not permitted on RGB PNG&#xA;libpng warning: iCCP: known incorrect sRGB profile&#xA;libpng warning: iCCP: cHRM chunk does not match sRGB&#xA;libpng warning: iCCP: profile &#39;ICC profile&#39;: &#39;GRAY&#39;: Gray color space not permitted on RGB PNG&#xA;libpng warning: iCCP: profile &#39;ICC profile&#39;: &#39;GRAY&#39;: Gray color space not permitted on RGB PNG&#xA;libpng warning: iCCP: profile &#39;ICC profile&#39;: &#39;GRAY&#39;: Gray color space not permitted on RGB PNG&#xA;libpng warning: iCCP: profile &#39;ICC profile&#39;: &#39;GRAY&#39;: Gray color space not permitted on RGB PNG&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;CraigAD:&lt;br /&gt;&#xA;I found this description of the problem that suggests a possible solution:&lt;br /&gt;&#xA;&lt;a href=&#34;https://stackoverflow.com/questions/43374187/qt-open-a-jpg-file-with-warning-image-format-not-supported&#34;&gt;https://stackoverflow.com/questions/43374187/qt-open-a-jpg-file-with-warning-image-format-not-supported&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PNG has many Formats some old, some not standard for Qt. see more History_and_development(&lt;a href=&#34;https://en.wikipedia.org/wiki/Portable_Network_Graphics#History_and_development&#34;&gt;https://en.wikipedia.org/wiki/Portable_Network_Graphics#History_and_development&lt;/a&gt;) You need to use Standard format in Qt.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I wrote a new go tool &lt;strong&gt;check_png&lt;/strong&gt; for convert liteide all png to standard png and fix this issues.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;check_png tool&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/visualfc/liteide/blob/master/liteidex/src/tools/check_png/main.go&#34;&gt;https://github.com/visualfc/liteide/blob/master/liteidex/src/tools/check_png/main.go&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;code: convert png file to NRGBA format.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;func (p *Process) ProcessPng(path string) error {&#xA;    f, err := os.Open(path)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    stat, err := f.Stat()&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    var buf bytes.Buffer&#xA;    srcImage, err := png.Decode(f)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    dstImage := image.NewNRGBA(srcImage.Bounds())&#xA;    draw.Draw(dstImage, dstImage.Bounds(), srcImage, srcImage.Bounds().Min, draw.Src)&#xA;&#xA;    err = png.Encode(&amp;amp;buf, dstImage)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    data, err := ioutil.ReadFile(path)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    if bytes.Compare(data, buf.Bytes()) != 0 {&#xA;        log.Println(&amp;quot;update png&amp;quot;, path, len(data), buf.Len())&#xA;        ioutil.WriteFile(path, buf.Bytes(), stat.Mode())&#xA;    }&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X33 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X33-Released/</link>
      <pubDate>2017-11-02 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X33 正式发布。这个版本优化了编辑器功能，读取文件支持 codec 自动检测，重新加载文件使用 diff 方式进行优化，重新实现 Mark API 并增加了新的 Bookmarks 插件；Go 语言视图和大纲增加了 TodoList 显示；修复了 GolangEdit 的 查找使用 偶而无效错误， 代码查询 guru (备份使用内置oracle) 增加了 GOPATH 内查询接口功能。调试和查找插件也有所增强……。更多的功能实现和错误修复详见更新记录。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2017.11.2 Ver X33&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;optimization editor plugin, load file check codec, reload file by diff&lt;/li&gt;&#xA;&lt;li&gt;add astview TodoList&lt;/li&gt;&#xA;&lt;li&gt;add new bookmarks plugin&lt;/li&gt;&#xA;&lt;li&gt;fix liteapp clean plugin order&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteApp&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;filemanager auto reload file default YesToAll&lt;/li&gt;&#xA;&lt;li&gt;fix liteapp clean plugins reverse order&lt;/li&gt;&#xA;&lt;li&gt;fix #832, sidebar change action by combox&lt;/li&gt;&#xA;&lt;li&gt;fix folder sync editor same prefix error&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reload file use diff to keep state and mark&lt;/li&gt;&#xA;&lt;li&gt;load file check is binary and report&lt;/li&gt;&#xA;&lt;li&gt;load file check codec use libucd if utf8 decode failed.&lt;/li&gt;&#xA;&lt;li&gt;load file check decode error and report&lt;/li&gt;&#xA;&lt;li&gt;load file is readonly set editor widget readonly&lt;/li&gt;&#xA;&lt;li&gt;load and save file support utf8 bom&lt;/li&gt;&#xA;&lt;li&gt;add codec and lineend info on statusbar&lt;/li&gt;&#xA;&lt;li&gt;add copied text into the clipboard as HTML option&lt;/li&gt;&#xA;&lt;li&gt;add Solarized Dark color theme, thanks xgdgsc&lt;/li&gt;&#xA;&lt;li&gt;reimplemented editor mark api&lt;/li&gt;&#xA;&lt;li&gt;fix copy to clipboard tab escape&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangAst&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add TodoList for classview and outline&lt;/li&gt;&#xA;&lt;li&gt;fix #848, astwidget double clicked index check.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangCode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update pkglist to go1.9&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangEdit&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add stop source query action&lt;/li&gt;&#xA;&lt;li&gt;add source query action implement_GOPATH for GOPATH scope&lt;/li&gt;&#xA;&lt;li&gt;fix golang lexer parser folding end&lt;/li&gt;&#xA;&lt;li&gt;fix GolangHighlighter fold indent error set&lt;/li&gt;&#xA;&lt;li&gt;fix findUsage wordUnderCursor offset&lt;/li&gt;&#xA;&lt;li&gt;fix find usages findStart signal late&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangFmt&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;load diff check modify current block text&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangCode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix update gopath process stop and wait&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteDebug&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix cmd to native separator&lt;/li&gt;&#xA;&lt;li&gt;build target add -a build flag&lt;/li&gt;&#xA;&lt;li&gt;change debug targget name to target.debug (custom by LiteBuild)&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add custom debug name in build config&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteFind&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix memory leak by GolangEdit GolangFileSearch&lt;/li&gt;&#xA;&lt;li&gt;fix findInFiles berore saveAllEditor&lt;/li&gt;&#xA;&lt;li&gt;fix FindEditor replace all&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;Bookmarks&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;new plugin for show open editors bookmarks and jump&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;gotools&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update stdlib for go1.9.1&lt;/li&gt;&#xA;&lt;li&gt;astview add TodoList support&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X32.2 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X32.2-Released/</link>
      <pubDate>2017-07-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X32.2 正式发布，这个版本解决了编辑器监控外部文件多次修改后监控失效的问题，调试插件启用了保存断点功能，修复了调试测试用例功能，修复了 Dlv 调试进程工作路径问题。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2017.7.18 Ver X32.2&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteApp&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix editor file watcher is invalid for many change&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangEdit&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix TODO/BUG/FIXME comment syntax&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;DlvDebugger&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix dlv headless process workdir&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteDebug&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix debug tests action&lt;/li&gt;&#xA;&lt;li&gt;fix load and save breakpoint for editor&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X32.1 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X32.1-Released/</link>
      <pubDate>2017-07-10 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X32.1 正式发布，新版本修复了 X32 版本的一些错误，优化了环境设置的加载；项目自定义 GOPATH 设置实现了子目录自动继承上级目录设置；Gocode 代码自动完成插件也已支持项目的自定义 GOPATH 设置；Dlv 调试插件启用了服务器模式(dlv headless mode)，实现了应用输出和调试信息输出的分离。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2017.7.7 Ver X32.1&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;build config custom gopath support inherit parent path&amp;rsquo;s  gopath setup&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangCode&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;update gocode lib-path by build config custom gopath&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEnv&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;optimization check go enviroment&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;build config custom gopath inherit parent path&lt;/li&gt;&#xA;&lt;li&gt;fix BuildAndRun kill old on window&lt;/li&gt;&#xA;&lt;li&gt;fix build config custom gopath action&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangPackage&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix load package treeview error&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;DlvDebugger&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;dlv use headless mode&lt;/li&gt;&#xA;&lt;li&gt;fix dlv kill process&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE X32 Released</title>
      <link>https://visualfc.github.io/blog/LiteIDE-X32-Released/</link>
      <pubDate>2017-06-12 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Go 语言开发工具 LiteIDE X32 正式发布。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;历经三个月，200 多次源码提交，LiteIDE终于完成了新版本的发布，&lt;a href=&#34;http://liteide.org&#34;&gt;liteide.org&lt;/a&gt; 网站在 &lt;a href=&#34;http://hopehook.com/&#34;&gt;HopeHook&lt;/a&gt; 的帮助下也正式推出。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;LiteIDE X32 在界面会话、编译系统、源码编辑、代码分析等方面有了很大改进，从去年开始重写的 MulitFolderModel 也终于完成合并到 LiteIDE 的目录窗口中。&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供了更多的界面主题和编辑器配色，感谢 &lt;a href=&#34;http://hopehook.com/&#34;&gt;HopeHook&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;支持外部图标加载功能&lt;/li&gt;&#xA;&lt;li&gt;支持会话切换功能（会话保持自己的目录和文件）&lt;/li&gt;&#xA;&lt;li&gt;编译目录支持自定义 GOPATH&lt;/li&gt;&#xA;&lt;li&gt;编译目录支持更多的设置&lt;/li&gt;&#xA;&lt;li&gt;调试插件/Go编辑插件支持编译目录的 BUILDFLAGS -tags 设定&lt;/li&gt;&#xA;&lt;li&gt;完善 Go 代码导航和重构功能&lt;/li&gt;&#xA;&lt;li&gt;更多的功能更新和 BUG 修复见历史记录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;2017.6.12 Ver X32&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LiteIDE&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;support folder build config custom GOPATH&lt;/li&gt;&#xA;&lt;li&gt;support folder build config BUILDFLAGS -tags setup&lt;/li&gt;&#xA;&lt;li&gt;support folder build config TARGETBASENAME setup&lt;/li&gt;&#xA;&lt;li&gt;support session switching for folder/editor&lt;/li&gt;&#xA;&lt;li&gt;support load custom icon library from liteapp/qrc folder (default and folder)&lt;/li&gt;&#xA;&lt;li&gt;reimplemented multifolder model, it took me a long time :)&lt;/li&gt;&#xA;&lt;li&gt;add macOS session menu for native dock menu&lt;/li&gt;&#xA;&lt;li&gt;recent menu sync for multi windows&lt;/li&gt;&#xA;&lt;li&gt;gotools support +build source navigate (single file or -tags setup)&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteApp&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add the session switching function&lt;/li&gt;&#xA;&lt;li&gt;add autosavedocument emit message option&lt;/li&gt;&#xA;&lt;li&gt;add max editor tab count option&lt;/li&gt;&#xA;&lt;li&gt;add option action to standard toolbar&lt;/li&gt;&#xA;&lt;li&gt;add tool window use shortcuts option for unstandard keyboard option&lt;/li&gt;&#xA;&lt;li&gt;add exit liteide ctrl+q on windows&lt;/li&gt;&#xA;&lt;li&gt;add themes (carbon.qss gray.qss sublime.qss) for liteide &amp;amp; beautify old themes, thanks for hope hook&lt;/li&gt;&#xA;&lt;li&gt;editor tab context add open terminal here action&lt;/li&gt;&#xA;&lt;li&gt;folders context menu add open in new windows action (new folder session)&lt;/li&gt;&#xA;&lt;li&gt;folder view add show showdetails action&lt;/li&gt;&#xA;&lt;li&gt;fix folder sync editor incorrect on macOS&lt;/li&gt;&#xA;&lt;li&gt;fix webview and debug console qss&lt;/li&gt;&#xA;&lt;li&gt;fix folders tool window enter key to jump&lt;/li&gt;&#xA;&lt;li&gt;fix exit error save session by ctrl+q on macos&lt;/li&gt;&#xA;&lt;li&gt;fix newfile dialog space name&lt;/li&gt;&#xA;&lt;li&gt;update folder tool window showInExporer showInShell action text&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteFind&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;find files add auto swith current folder checkbox&lt;/li&gt;&#xA;&lt;li&gt;find in editor add show replace mode checkbox&lt;/li&gt;&#xA;&lt;li&gt;filesearch enable replace whitespace or empty&lt;/li&gt;&#xA;&lt;li&gt;editor replace all in one edit block for ctrl+z once undo&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteBuild&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add custom GOPATH in build config for build/debug/GolangEdit&lt;/li&gt;&#xA;&lt;li&gt;add custom share-value BUILDFLAGS in build config for build/debug/GolangEdit&lt;/li&gt;&#xA;&lt;li&gt;add custom TARGETBASENAME in build config for build/debug&lt;/li&gt;&#xA;&lt;li&gt;support BUILDFLAGS -tags for build/debug/GolangEdit&lt;/li&gt;&#xA;&lt;li&gt;update gosrc.xml to export custom value and share-value&lt;/li&gt;&#xA;&lt;li&gt;folders tool window context menu add Go build configuration action&lt;/li&gt;&#xA;&lt;li&gt;folders tool window context go tool use Go build configuration setup&lt;/li&gt;&#xA;&lt;li&gt;fix stop action for kill process&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteDebug&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;console use editor color scheme&lt;/li&gt;&#xA;&lt;li&gt;support LiteBuild folder build config BUILDFLAGS/BUILDARGS -tags flag setup&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;DlvDebugger&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix process identify for auto exit&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEnv&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;default env /usr/local/go on macosx&lt;/li&gt;&#xA;&lt;li&gt;update macosx cross env GOROOT for system&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;LiteEditor&lt;br /&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;context menu add convert case menu&lt;/li&gt;&#xA;&lt;li&gt;go.snippet add iferr&lt;/li&gt;&#xA;&lt;li&gt;update sublime.xml / sublime-bold.xml, thanks for hopehook &lt;a href=&#34;mailto:hopehook@qq.com&#34;&gt;hopehook@qq.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;alt+backspace delete serial whitespaces&lt;/li&gt;&#xA;&lt;li&gt;option font QComboBox to QFontComboBox, add restore DefaultFont action&lt;/li&gt;&#xA;&lt;li&gt;option add show monospace font check&lt;/li&gt;&#xA;&lt;li&gt;option file types sort mimetype, show custom extsition first&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangPackage&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;gopath setup add use sysgopath/litegopath check&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangPlay&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix goplay use goenvironment&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangDoc&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;change golang api index search for go/api folder&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangEdit&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add go root source readonly setup option&lt;/li&gt;&#xA;&lt;li&gt;support folder go build config BUILDFLAGS/BUILDARGS -tags flag setup&lt;/li&gt;&#xA;&lt;li&gt;fix interface type by gotools&lt;/li&gt;&#xA;&lt;li&gt;fix find process stop and run&lt;/li&gt;&#xA;&lt;li&gt;fix lookup guru for source query&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;GolangAst&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix astview enter key to jump&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;FileBorwser&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix file system enter key to jump&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;gotools&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fix types interface method&lt;/li&gt;&#xA;&lt;li&gt;types support +build for single source&lt;/li&gt;&#xA;&lt;li&gt;types support -tags flag&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;tools&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;add new exportqrc tool for export liteide all build-in images&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE 的配置文件管理</title>
      <link>https://visualfc.github.io/blog/LiteIDE-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>2017-03-18 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## LiteIDE 的配置文件 --&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 的配置文件默认存储在当前用户目录中，我们也可以设置存储在程序本地目录中。通过 &lt;strong&gt;选项&lt;/strong&gt;（ &lt;strong&gt;偏好设置&lt;/strong&gt; ）=&amp;gt; &lt;strong&gt;LiteApp&lt;/strong&gt; =&amp;gt; &lt;strong&gt;存储&lt;/strong&gt; &lt;em&gt;存储设置到本地ini文件&lt;/em&gt; 选项来切换默认的存储位置。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;存储至当前用户配置&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 的配置文件默认存储在当前用户的特定目录中，如在 macOS 下存储在当前用户目录 &lt;code&gt;/.config/liteide/liteide.ini&lt;/code&gt; 文件中,&#xA;这可以保证在 LiteIDE 更新后当前用户的配置保持不变，包括用户的 GOPATH 配置以及历史目录、历史文件等信息。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;存储至程序本地配置&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;我们也可以将 LiteIDE 的配置文件存储在 LiteIDE 的本地目录中，即 LiteIDE的 &lt;code&gt;share/liteapp/config/liteide.ini&lt;/code&gt; 文件中，&#xA;这可以保证配置信息跟随 LiteIDE 程序启用，我们可以在自己的系统中复制多份 LiteIDE，每个都保持有自己的环境信息、GOPATH 配置、历史目录等信息，&#xA;这样可以方便多个项目独立使用。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;命令行操作&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在 LiteIDE x31 中加入了对配置文件的命令行操作行为，包括以下三种：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;--local-setting   强制使用本地配置&lt;/li&gt;&#xA;&lt;li&gt;--user-setting    强制使用用户配置&lt;/li&gt;&#xA;&lt;li&gt;--reset-setting   重置当前配置 ( 清除配置文件 )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;如果在使用 LiteIDE 过程中发现出现莫名其妙的问题或者是刚启动就报错，有可能是配置文件出错，对于这种情况，除了手工删除配置文件的方法，&#xA;我们还可以通过命令行  &lt;code&gt;&amp;gt;liteide --reset-setting&lt;/code&gt; 来重置 LiteIDE 的当前配置文件。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE 的交叉编译设置</title>
      <link>https://visualfc.github.io/blog/LiteIDE-%E7%9A%84%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>2017-03-17 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## LiteIDE 的交叉编译设置 --&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 通过使用环境配置文件来支持 go 语言的交叉编译，对于 windows 和 linux 下相对简单，对于 macOS 可能会复杂一些，&#xA;本文以 macOS 交叉编译 windows-386 可执行文件为例，简要介绍如何在 LiteIDE 中配置和实现交叉编译功能。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;交叉编译环境选择和配置&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;首先选择环境，在工具栏环境选择中选择  cross-win32 切换至 windows-386 交对编译环境，我们点击工具栏上的 &lt;strong&gt;编辑当前环境&lt;/strong&gt; 按钮，对当前使用的环境即 cross-win32.env 文件进行编辑，默认设置如下：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=$HOME/go&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$GOROOT/bin:$PATH&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;我们可以看到 GOARCH 和 GOOS 已经设置完毕，我们需要更改的是 GOROOT 和 PATH 变量，主要设置方式有两种，&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;第一种方式，不设置 GOROOT 直接设置 PATH&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;这种方式中，我们不设置 GOROOT 变量，而是通过 PATH 设置让 LiteIDE 在内部使用 go env 自动查询 GOROOT，设置如下&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#GOROOT=$HOME/go&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$PATH:/usr/local/bin&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;第二种方式，直接设置 GOPATH 值&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;这种方式是直接设置 GOROOT，可以通过在终端下输入 &lt;code&gt;go env&lt;/code&gt; 来查询 GOROOT 位置，如果是使用官方安装，&#xA;可能显示为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=&amp;quot;/usr/local/go&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果是使用 brew install go 安装，则可能显示为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=&amp;quot;/usr/local/Cellar/go/1.8/libexec&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;对于官方安装，我们编辑 cross-win32 环境对应为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=/usr/local/go&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$GOROOT/bin:$PATH&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;对于 brew 安装，我们编辑 cross-win32 环境对应为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=/usr/local/Cellar/go/1.8/libexec&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$GOROOT/bin:$PATH&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;保存环境并通过 go env 查看&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;保存cross-win32.env 后，LiteIDE 自动重新加载 cross-win32 环境，打开编译输出窗口可以看到类似如下输出&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/usr/local/go/bin/go env []&#xA;GOARCH=&amp;quot;386&amp;quot;&#xA;GOBIN=&amp;quot;&amp;quot;&#xA;GOEXE=&amp;quot;.exe&amp;quot;&#xA;GOHOSTARCH=&amp;quot;amd64&amp;quot;&#xA;GOHOSTOS=&amp;quot;darwin&amp;quot;&#xA;GOOS=&amp;quot;windows&amp;quot;&#xA;GOPATH=&amp;quot;/Users/vfc/goproj&amp;quot;&#xA;GORACE=&amp;quot;&amp;quot;&#xA;GOROOT=&amp;quot;/usr/local/go&amp;quot;&#xA;GOTOOLDIR=&amp;quot;/usr/local/go/pkg/tool/darwin_amd64&amp;quot;&#xA;GCCGO=&amp;quot;gccgo&amp;quot;&#xA;GO386=&amp;quot;&amp;quot;&#xA;CC=&amp;quot;clang&amp;quot;&#xA;GOGCCFLAGS=&amp;quot;-m32 -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/2b/fhf209x571lgp5dljz593q040000gn/T/go-build420337682=/tmp/go-build -gno-record-gcc-switches&amp;quot;&#xA;CXX=&amp;quot;clang++&amp;quot;&#xA;CGO_ENABLED=&amp;quot;0&amp;quot;&#xA;PKG_CONFIG=&amp;quot;pkg-config&amp;quot;&#xA;CGO_CFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;CGO_CPPFLAGS=&amp;quot;&amp;quot;&#xA;CGO_CXXFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;CGO_FFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;CGO_LDFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注：以上环境信息也可以调用菜单 &lt;strong&gt;查看&lt;/strong&gt; - &lt;strong&gt;执行文件&lt;/strong&gt; （快捷键为 Command+` ）功能的输入窗口中输入 go env 来查看。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;交叉编译时提示没有权限的处理方法&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在 cross-win32环境下，我们打开项目中的 go 源码文件，使用工具栏上的 &lt;strong&gt;编译&lt;/strong&gt; 命令或者在 &lt;strong&gt;执行文件&lt;/strong&gt; 中输入 go build 进行编译测试。&#xA;如果是使用 brew 安装，这时候就可以编译成功，如果使用 go 安装，有可能会出现以下提示&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go install runtime/internal/sys: mkdir /usr/local/go/pkg/windows_386: permission denied&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;出现这个错误则说明 LiteIDE 没有 /usr/local/go 路径的写权限，遇到这种情况，我们需要在终端下先交叉编译好 go 环境。在终端下输入&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo GOOS=windows GOARCH=386 go install std&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;这里的 &lt;code&gt;go install std&lt;/code&gt; 表示编译安装标准库，安装结束后，我们在 LiteIDE 中就可以正常使用 windows-386 交叉编译环境了。&#xA;对于其他交叉编译环境，需要时可以做同样的处理。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>更新 Golang Api Index 功能</title>
      <link>https://visualfc.github.io/blog/%E6%9B%B4%E6%96%B0-Golang-Api-Index-%E5%8A%9F%E8%83%BD/</link>
      <pubDate>2017-03-16 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## 更新 Golang Api Index 功能 --&gt;&#xA;&#xA;&lt;p&gt;最近更新了 Golang Api Index 功能，之前是通过 gotools 对 GOPATH 内的所有源码进行索引，并在用户目录中建立一个索引文件，&#xA;文件格式与 go/api/go1.txt 类似，这个功能的问题是使用 gotools 建立索引的速度很慢，查询功能与 Golang Doc Search 的功能也有所重复，而且我还发现 gotools 工具对于 go1.8 的源码建立索引出错。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在最新版本中，我对 Golang Api Index 的功能重新定位，更改为只查询 go 标准库 api，即查询 go/api 目录下的文件，&#xA;包含 &lt;code&gt;go1.txt go1.1.txt ... except.txt next.txt&lt;/code&gt; ，&#xA;同时在查询结果列表中加入了 api 所对应的 go 版本（文件），如下图所示。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2017-03-16-goapi-index/goapi-index.png&#34; alt=&#34;&#34; width=&#34;600&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这样看起来工整多了，并且与 Golang Doc Search 有所区别。&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>