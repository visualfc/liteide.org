<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>LiteIDE</title>
    <link>https://visualfc.github.io</link>
    <pubDate>18 May 17 23:25 CST</pubDate>
    <item>
      <title>LiteIDE 的配置文件管理</title>
      <link>https://visualfc.github.io/blog/LiteIDE-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>2017-03-18 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## LiteIDE 的配置文件 --&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 的配置文件默认存储在当前用户目录中，我们也可以设置存储在程序本地目录中。通过 &lt;strong&gt;选项&lt;/strong&gt;（ &lt;strong&gt;偏好设置&lt;/strong&gt; ）=&amp;gt; &lt;strong&gt;LiteApp&lt;/strong&gt; =&amp;gt; &lt;strong&gt;存储&lt;/strong&gt; &lt;em&gt;存储设置到本地ini文件&lt;/em&gt; 选项来切换默认的存储位置。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;存储至当前用户配置&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 的配置文件默认存储在当前用户的特定目录中，如在 macOS 下存储在当前用户目录 &lt;code&gt;/.config/liteide/liteide.ini&lt;/code&gt; 文件中,&#xA;这可以保证在 LiteIDE 更新后当前用户的配置保持不变，包括用户的 GOPATH 配置以及历史目录、历史文件等信息。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;存储至程序本地配置&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;我们也可以将 LiteIDE 的配置文件存储在 LiteIDE 的本地目录中，即 LiteIDE的 &lt;code&gt;share/liteapp/config/liteide.ini&lt;/code&gt; 文件中，&#xA;这可以保证配置信息跟随 LiteIDE 程序启用，我们可以在自己的系统中复制多份 LiteIDE，每个都保持有自己的环境信息、GOPATH 配置、历史目录等信息，&#xA;这样可以方便多个项目独立使用。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;命令行操作&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在 LiteIDE x31 中加入了对配置文件的命令行操作行为，包括以下三种：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;--local-setting   强制使用本地配置&lt;/li&gt;&#xA;&lt;li&gt;--user-setting    强制使用用户配置&lt;/li&gt;&#xA;&lt;li&gt;--reset-setting   重置当前配置 ( 清除配置文件 )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;如果在使用 LiteIDE 过程中发现出现莫名其妙的问题或者是刚启动就报错，有可能是配置文件出错，对于这种情况，除了手工删除配置文件的方法，&#xA;我们还可以通过命令行  &lt;code&gt;&amp;gt;liteide --reset-setting&lt;/code&gt; 来重置 LiteIDE 的当前配置文件。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>LiteIDE 的交叉编译设置</title>
      <link>https://visualfc.github.io/blog/LiteIDE-%E7%9A%84%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>2017-03-17 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## LiteIDE 的交叉编译设置 --&gt;&#xA;&#xA;&lt;p&gt;LiteIDE 通过使用环境配置文件来支持 go 语言的交叉编译，对于 windows 和 linux 下相对简单，对于 macOS 可能会复杂一些，&#xA;本文以 macOS 交叉编译 windows-386 可执行文件为例，简要介绍如何在 LiteIDE 中配置和实现交叉编译功能。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;交叉编译环境选择和配置&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;首先选择环境，在工具栏环境选择中选择  cross-win32 切换至 windows-386 交对编译环境，我们点击工具栏上的 &lt;strong&gt;编辑当前环境&lt;/strong&gt; 按钮，对当前使用的环境即 cross-win32.env 文件进行编辑，默认设置如下：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=$HOME/go&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$GOROOT/bin:$PATH&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;我们可以看到 GOARCH 和 GOOS 已经设置完毕，我们需要更改的是 GOROOT 和 PATH 变量，主要设置方式有两种，&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;第一种方式，不设置 GOROOT 直接设置 PATH&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;这种方式中，我们不设置 GOROOT 变量，而是通过 PATH 设置让 LiteIDE 在内部使用 go env 自动查询 GOROOT，设置如下&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#GOROOT=$HOME/go&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$PATH:/usr/local/bin&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;第二种方式，直接设置 GOPATH 值&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;这种方式是直接设置 GOROOT，可以通过在终端下输入 &lt;code&gt;go env&lt;/code&gt; 来查询 GOROOT 位置，如果是使用官方安装，&#xA;可能显示为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=&amp;quot;/usr/local/go&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果是使用 brew install go 安装，则可能显示为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=&amp;quot;/usr/local/Cellar/go/1.8/libexec&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;对于官方安装，我们编辑 cross-win32 环境对应为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=/usr/local/go&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$GOROOT/bin:$PATH&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;对于 brew 安装，我们编辑 cross-win32 环境对应为&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOROOT=/usr/local/Cellar/go/1.8/libexec&#xA;#GOBIN=&#xA;GOARCH=386&#xA;GOOS=windows&#xA;CGO_ENABLED=0&#xA;&#xA;PATH=$GOROOT/bin:$PATH&#xA;&#xA;LITEIDE_GDB=/usr/local/bin/gdb&#xA;LITEIDE_MAKE=make&#xA;LITEIDE_TERM=/usr/bin/open&#xA;LITEIDE_TERMARGS=-a Terminal&#xA;LITEIDE_EXEC=/usr/X11R6/bin/xterm&#xA;LITEIDE_EXECOPT=-e&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;保存环境并通过 go env 查看&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;保存cross-win32.env 后，LiteIDE 自动重新加载 cross-win32 环境，打开编译输出窗口可以看到类似如下输出&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/usr/local/go/bin/go env []&#xA;GOARCH=&amp;quot;386&amp;quot;&#xA;GOBIN=&amp;quot;&amp;quot;&#xA;GOEXE=&amp;quot;.exe&amp;quot;&#xA;GOHOSTARCH=&amp;quot;amd64&amp;quot;&#xA;GOHOSTOS=&amp;quot;darwin&amp;quot;&#xA;GOOS=&amp;quot;windows&amp;quot;&#xA;GOPATH=&amp;quot;/Users/vfc/goproj&amp;quot;&#xA;GORACE=&amp;quot;&amp;quot;&#xA;GOROOT=&amp;quot;/usr/local/go&amp;quot;&#xA;GOTOOLDIR=&amp;quot;/usr/local/go/pkg/tool/darwin_amd64&amp;quot;&#xA;GCCGO=&amp;quot;gccgo&amp;quot;&#xA;GO386=&amp;quot;&amp;quot;&#xA;CC=&amp;quot;clang&amp;quot;&#xA;GOGCCFLAGS=&amp;quot;-m32 -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/2b/fhf209x571lgp5dljz593q040000gn/T/go-build420337682=/tmp/go-build -gno-record-gcc-switches&amp;quot;&#xA;CXX=&amp;quot;clang++&amp;quot;&#xA;CGO_ENABLED=&amp;quot;0&amp;quot;&#xA;PKG_CONFIG=&amp;quot;pkg-config&amp;quot;&#xA;CGO_CFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;CGO_CPPFLAGS=&amp;quot;&amp;quot;&#xA;CGO_CXXFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;CGO_FFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;CGO_LDFLAGS=&amp;quot;-g -O2&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注：以上环境信息也可以调用菜单 &lt;strong&gt;查看&lt;/strong&gt; - &lt;strong&gt;执行文件&lt;/strong&gt; （快捷键为 Command+` ）功能的输入窗口中输入 go env 来查看。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;交叉编译时提示没有权限的处理方法&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在 cross-win32环境下，我们打开项目中的 go 源码文件，使用工具栏上的 &lt;strong&gt;编译&lt;/strong&gt; 命令或者在 &lt;strong&gt;执行文件&lt;/strong&gt; 中输入 go build 进行编译测试。&#xA;如果是使用 brew 安装，这时候就可以编译成功，如果使用 go 安装，有可能会出现以下提示&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go install runtime/internal/sys: mkdir /usr/local/go/pkg/windows_386: permission denied&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;出现这个错误则说明 LiteIDE 没有 /usr/local/go 路径的写权限，遇到这种情况，我们需要在终端下先交叉编译好 go 环境。在终端下输入&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ sudo GOOS=windows GOARCH=386 go install std&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;这里的 &lt;code&gt;go install std&lt;/code&gt; 表示编译安装标准库，安装结束后，我们在 LiteIDE 中就可以正常使用 windows-386 交叉编译环境了。&#xA;对于其他交叉编译环境，需要时可以做同样的处理。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>更新 Golang Api Index 功能</title>
      <link>https://visualfc.github.io/blog/%E6%9B%B4%E6%96%B0-Golang-Api-Index-%E5%8A%9F%E8%83%BD/</link>
      <pubDate>2017-03-16 12:00:00 +0800</pubDate>
      <description>&lt;!-- ## 更新 Golang Api Index 功能 --&gt;&#xA;&#xA;&lt;p&gt;最近更新了 Golang Api Index 功能，之前是通过 gotools 对 GOPATH 内的所有源码进行索引，并在用户目录中建立一个索引文件，&#xA;文件格式与 go/api/go1.txt 类似，这个功能的问题是使用 gotools 建立索引的速度很慢，查询功能与 Golang Doc Search 的功能也有所重复，而且我还发现 gotools 工具对于 go1.8 的源码建立索引出错。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在最新版本中，我对 Golang Api Index 的功能重新定位，更改为只查询 go 标准库 api，即查询 go/api 目录下的文件，&#xA;包含 &lt;code&gt;go1.txt go1.1.txt ... except.txt next.txt&lt;/code&gt; ，&#xA;同时在查询结果列表中加入了 api 所对应的 go 版本（文件），如下图所示。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2017-03-16-goapi-index/goapi-index.png&#34; alt=&#34;&#34; width=&#34;600&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这样看起来工整多了，并且与 Golang Doc Search 有所区别。&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>